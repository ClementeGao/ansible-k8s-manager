- name: 检测是否已经存在证书
  shell: "ls {{K8S_TEMP_DIR}}/{ca.pem,ca-key.pem}"
  ignore_errors: true
  register: ret
  tags: 'root-ca'

- block:
  - name: 准备生成自签名ca证书配置相关文件
    template:
      src: "{{item.src}}"
      dest: "{{K8S_TEMP_DIR}}/{{item.dest}}"
      mode: 0644
    loop:
      - {src: ca-config.json.tpl, dest: ca-config.json}
      - {src: ca-csr.json.tpl, dest: ca-csr.json}

  - name: 生成根证书（自签名）
    shell: "cd {{K8S_TEMP_DIR}} && cfssl gencert -initca ca-csr.json | cfssljson -bare ca"

  when: ret.rc != 0 or FORCE_INSTALL == 1
  tags: 'root-ca'

- name: 检测是否已经存在证书
  shell: "ls {{K8S_TEMP_DIR}}/{etcd.pem,etcd-key.pem}"
  ignore_errors: true
  register: ret
  tags: 'etcd-ca'

- block:
  - name: 准备etcd证书签名请求配置文件
    template:
      src: etcd-csr.json.tpl
      dest: "{{K8S_TEMP_DIR}}/etcd-csr.json"
      mode: 0644

  - name: 生成etcd证书
    shell: "cd {{K8S_TEMP_DIR}} && cfssl gencert -ca={{K8S_TEMP_DIR}}/ca.pem \
          -ca-key={{K8S_TEMP_DIR}}/ca-key.pem -config={{K8S_TEMP_DIR}}/ca-config.json \
          -profile=kubernetes etcd-csr.json | cfssljson -bare etcd"

  when: ret.rc != 0 or FORCE_INSTALL == 1
  tags: 'etcd-ca'

- name: 检测是否已经存在证书
  shell: "ls {{K8S_TEMP_DIR}}/{flanneld.pem,flanneld-key.pem}"
  ignore_errors: true
  register: ret
  tags: 'flanneld-ca'

- block:
  - name: 准备flanneld证书签名请求配置文件
    template:
      src: flanneld-csr.json.tpl
      dest: "{{K8S_TEMP_DIR}}/flanneld-csr.json"
      mode: 0644

  - name: 生成flanneld证书
    shell: "cd {{K8S_TEMP_DIR}} && cfssl gencert -ca={{K8S_TEMP_DIR}}/ca.pem \
          -ca-key={{K8S_TEMP_DIR}}/ca-key.pem -config={{K8S_TEMP_DIR}}/ca-config.json \
          -profile=kubernetes flanneld-csr.json | cfssljson -bare flanneld"

  when: ret.rc != 0 or FORCE_INSTALL == 1
  tags: 'flanneld-ca'

- name: 检测是否已经存在证书
  shell: "ls {{K8S_TEMP_DIR}}/{admin.pem,admin-key.pem,aggregator.pem,aggregator-key.pem,kubernetes.pem,kubernetes-key.pem}"
  ignore_errors: true
  register: ret
  tags: 'kube-apiserver-ca'

- block:
  - name: 准备admin证书签名请求配置文件
    template:
      src: admin-csr.json.tpl
      dest: "{{K8S_TEMP_DIR}}/admin-csr.json"
      mode: 0644

  - name: 生成admin证书
    shell: "cd {{K8S_TEMP_DIR}} && cfssl gencert -ca={{K8S_TEMP_DIR}}/ca.pem \
            -ca-key={{K8S_TEMP_DIR}}/ca-key.pem -config={{K8S_TEMP_DIR}}/ca-config.json \
            -profile=kubernetes admin-csr.json | cfssljson -bare admin"

  - name: 准备aggregator证书签名请求配置文件
    template:
      src: aggregator-csr.json.tpl
      dest: "{{K8S_TEMP_DIR}}/aggregator-csr.json"
      mode: 0644

  - name: 生成aggregator证书
    shell: "cd {{K8S_TEMP_DIR}} && cfssl gencert -ca={{K8S_TEMP_DIR}}/ca.pem \
            -ca-key={{K8S_TEMP_DIR}}/ca-key.pem -config={{K8S_TEMP_DIR}}/ca-config.json \
            -profile=kubernetes aggregator-csr.json | cfssljson -bare aggregator"

  - name: 准备api-server证书签名请求配置文件
    template:
      src: kubernetes-csr.json.tpl
      dest: "{{K8S_TEMP_DIR}}/kubernetes-csr.json"
      mode: 0644

  - name: 生成api-server证书
    shell: "cd {{K8S_TEMP_DIR}} && cfssl gencert -ca={{K8S_TEMP_DIR}}/ca.pem \
            -ca-key={{K8S_TEMP_DIR}}/ca-key.pem -config={{K8S_TEMP_DIR}}/ca-config.json \
            -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes"

  when: ret.rc != 0 or FORCE_INSTALL == 1
  tags: 'kube-apiserver-ca'

- name: 检测是否已经存在证书
  shell: "ls {{K8S_TEMP_DIR}}/{kube-controller-manager.pem,kube-controller-manager-key.pem}"
  ignore_errors: true
  register: ret
  tags: 'kube-controller-manager-ca'

- block:
  - name: 准备kube-controller-manager证书签名请求配置文件
    template:
      src: kube-controller-manager-csr.json.tpl
      dest: "{{K8S_TEMP_DIR}}/kube-controller-manager-csr.json"
      mode: 0644

  - name: 生成kube-controller-manager证书
    shell: "cd {{K8S_TEMP_DIR}} && cfssl gencert -ca={{K8S_TEMP_DIR}}/ca.pem \
            -ca-key={{K8S_TEMP_DIR}}/ca-key.pem -config={{K8S_TEMP_DIR}}/ca-config.json \
            -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager"

  when: ret.rc != 0 or FORCE_INSTALL == 1
  tags: 'kube-controller-manager-ca'

- name: 检测是否已经存在证书
  shell: "ls {{K8S_TEMP_DIR}}/{kube-scheduler.pem,kube-scheduler-key.pem}"
  ignore_errors: true
  register: ret
  tags: 'kube-scheduler-ca'

- block:
  - name: 准备kube-scheduler证书签名请求配置文件
    template:
      src: kube-scheduler-csr.json.tpl
      dest: "{{K8S_TEMP_DIR}}/kube-scheduler-csr.json"
      mode: 0644

  - name: 生成kube-scheduler证书
    shell: "cd {{K8S_TEMP_DIR}} && cfssl gencert -ca={{K8S_TEMP_DIR}}/ca.pem \
            -ca-key={{K8S_TEMP_DIR}}/ca-key.pem -config={{K8S_TEMP_DIR}}/ca-config.json \
            -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler"

  when: ret.rc != 0 or FORCE_INSTALL == 1
  tags: 'kube-scheduler-ca'

- name: 检测是否已经存在证书
  shell: "ls {{K8S_TEMP_DIR}}/{kube-proxy.pem,kube-proxy-key.pem}"
  ignore_errors: true
  register: ret
  tags: 'kube-proxy-ca'

- block:
  - name: 准备kube-proxy证书签名请求配置文件
    template:
      src: kube-proxy-csr.json.tpl
      dest: "{{K8S_TEMP_DIR}}/kube-proxy-csr.json"
      mode: 0644

  - name: 生成kube-proxy证书
    shell: "cd {{K8S_TEMP_DIR}} && cfssl gencert -ca={{K8S_TEMP_DIR}}/ca.pem \
            -ca-key={{K8S_TEMP_DIR}}/ca-key.pem -config={{K8S_TEMP_DIR}}/ca-config.json \
            -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy"

  when: ret.rc != 0 or FORCE_INSTALL == 1
  tags: 'kube-proxy-ca'